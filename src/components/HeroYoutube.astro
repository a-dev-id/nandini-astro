---
interface Img {
  src: string;
  alt?: string;
}
interface Props {
  videoId: string;             // e.g. "9_9ppP8KUfg"
  start?: number;
  posterSrc?: string;
  images?: Img[];              // exactly 3 for mobile carousel
}

const {
  videoId,
  start = 0,
  posterSrc = "/images/hero-fallback.jpg",
  images = [
    { src: "/images/mobile-1.jpg", alt: "Slide 1" },
    { src: "/images/mobile-2.jpg", alt: "Slide 2" },
    { src: "/images/mobile-3.jpg", alt: "Slide 3" },
  ],
} = Astro.props;

const params = new URLSearchParams({
  autoplay: "1",
  mute: "1",
  loop: "1",
  playlist: videoId,
  playsinline: "1",
  controls: "0",
  rel: "0",
  modestbranding: "1",
  iv_load_policy: "3",
  start: String(start),
});
---

<!-- Full-bleed on sm+ (breaks out of centered wrappers) -->
<section class="relative overflow-hidden sm:ml-[calc(50%-50vw)] sm:mr-[calc(50%-50vw)] sm:w-screen">
  <!-- MOBILE: 4:3 image carousel -->
  <div class="relative block aspect-[4/5] w-full sm:hidden">
    <!-- track -->
    <div id="mTrack" class="absolute inset-0 flex h-full w-full transition-transform duration-500 ease-out will-change-transform">
      {images.map((img, i) => (
        <img
          src={img.src}
          alt={img.alt ?? `Slide ${i + 1}`}
          loading="lazy"
          decoding="async"
          class="h-full w-full shrink-0 object-cover"
        />
      ))}
    </div>

    <!-- arrows -->
    <button id="mPrev"
      aria-label="Previous slide"
      class="absolute left-3 top-1/2 z-10 -translate-y-1/2 rounded-full bg-black/40 p-2 backdrop-blur hover:bg-black/60 active:scale-95">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button id="mNext"
      aria-label="Next slide"
      class="absolute right-3 top-1/2 z-10 -translate-y-1/2 rounded-full bg-black/40 p-2 backdrop-blur hover:bg-black/60 active:scale-95">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- top band + hairline under navbar -->
    <div class="pointer-events-none absolute inset-x-0 top-0 h-8 bg-gradient-to-b from-black/55 to-transparent"></div>
    <div class="pointer-events-none absolute inset-x-0 top-0 h-px" style="background: rgba(255,255,255,.15);"></div>
  </div>

  <!-- TABLET+ : full-screen background video, unclickable -->
  <div class="relative hidden h-[100svh] w-screen overflow-hidden sm:block">
    <img
      src={posterSrc}
      alt=""
      loading="lazy"
      decoding="async"
      class="absolute inset-0 h-full w-full object-cover"
    />

    <div class="absolute inset-0 overflow-hidden">
      <iframe
        src={`https://www.youtube-nocookie.com/embed/${videoId}?${params.toString()}`}
        title=""
        class="yt-bg pointer-events-none select-none"
        tabindex="-1"
        aria-hidden="true"
        allow="autoplay; fullscreen; picture-in-picture; encrypted-media"
        allowfullscreen
      ></iframe>
    </div>

    <div class="pointer-events-none absolute inset-x-0 top-0 h-8 bg-gradient-to-b from-black/55 to-transparent"></div>
    <div class="pointer-events-none absolute inset-x-0 top-0 h-px" style="background: rgba(255,255,255,.15);"></div>
  </div>
</section>

<style>
  /* Robust 16:9 cover for the iframe (no gutters) */
  .yt-bg{
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%,-50%);
    width:100vw;         /* fill viewport width */
    height:56.25vw;      /* 9/16 of width */
    min-width:177.78vh;  /* 16/9 of height to ensure cover when taller */
    min-height:100svh;   /* at least full viewport height */
  }
</style>

<script is:inline>
  // Mobile carousel logic (no dependencies)
  const track = document.getElementById('mTrack');
  const prev  = document.getElementById('mPrev');
  const next  = document.getElementById('mNext');

  if (track && prev && next) {
    const slides = track.children.length;
    let index = 0;

    const update = () => {
      track.style.transform = `translateX(-${index * 100}%)`;
    };

    prev.addEventListener('click', () => {
      index = (index - 1 + slides) % slides;
      update();
    });

    next.addEventListener('click', () => {
      index = (index + 1) % slides;
      update();
    });

    // Touch swipe
    let startX = 0, dx = 0, touching = false;
    track.addEventListener('touchstart', (e) => {
      touching = true;
      startX = e.touches[0].clientX;
      dx = 0;
    }, {passive:true});

    track.addEventListener('touchmove', (e) => {
      if (!touching) return;
      dx = e.touches[0].clientX - startX;
    }, {passive:true});

    track.addEventListener('touchend', () => {
      if (!touching) return;
      touching = false;
      const threshold = 40; // px
      if (dx > threshold) {
        index = (index - 1 + slides) % slides;
      } else if (dx < -threshold) {
        index = (index + 1) % slides;
      }
      update();
    });

    update();
  }
</script>
